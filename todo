#!/usr/bin/env ruby
# Write/remove a task to do later.
require 'dmenu_util'
$SB='"#336699"'
$SF='"#cccccc"'
$NB='"#111111"'
$NF='"#cccccc"'
$SCREEN_WIDTH=1366
$FONT_WIDTH=14 #in pixels
$FONT='"Sazanami Mincho":pixelsize=' + $FONT_WIDTH.to_s

$COMMAND_SIG = "@"
$GROUP_SIG = "+"
$UNSORTED_NAME = $GROUP_SIG.next.next
$FILE="#{ENV["HOME"]}/todo/todo.txt"

$GROUP_REGEX = /#{Regexp.escape($GROUP_SIG)}[^ ]+/

$ADD_OR_DELETE_COMMANDS = %w[move edit group-view vim]
$GROUP_VIEW_COMMANDS = %w[move edit]
$at_end = []

def my_dmenu (entries, prompt='todo', height=false, width=$SCREEN_WIDTH)
    if not height
        height = entries.length
    end
    height = [height, 20].min
    dmenu(entries, prompt, height, width,
              $NF,
              $NB,
              $SF,
              $SB)
end

$entries = File.open($FILE) do |f|
    f.lines.to_a.map{|x| x.to_s.chomp}
end

def numbered_entries(e)
    width = (Math.log(e.length) / Math.log(10)).to_i + 1
    e.each_with_index.map{|x,i| "#{"%#{width}d" % (i+1) }. #{x}"}
end

def split_task(s)
    md = s.match(/^ *([0-9]+)\. *(.*)$/)
    if md.nil?
        [-1, s]
    else
        [md[1].to_i, md[2]]
    end
end

def extract_index_from_task_text(s)
    idx = /^ *[0-9]+/.match(s)
    if !idx.nil?
        idx[0].to_i - 1
    else
        -1
    end

end

def move_entryDM
    # Moves an entry from one place to another with user interaction
    t = my_dmenu(numbered_entries($entries), "Move which task?")
    idx = extract_index_from_task_text(t)
    if idx >= 0
        copy = Array.new($entries)
        x = copy.delete_at(idx)
        s = my_dmenu(numbered_entries(copy + ['']), "Put task where?")
        idx = extract_index_from_task_text(s)
        if idx >= 0
            copy.insert(idx, x)
            $entries = copy
        end
        true
    else
        false
    end
end

def add_or_deleteDM
    prompt="Add/delete a task"
    task = my_dmenu(numbered_entries($entries) + $ADD_OR_DELETE_COMMANDS.map{|x|$COMMAND_SIG+x}, prompt)
    if task.empty?
        false
    elsif task.to_s.start_with?($COMMAND_SIG)
        add_or_delete_commandDM(task)
    else
        idx = extract_index_from_task_text(task)
        if idx >= 0
            $entries.delete_at(idx)
        else
            $entries.push(task)
        end
        true
    end
end

def editDM
    prompt = "Editing..."
    task = my_dmenu(numbered_entries($entries), prompt)
    if task.empty?
        false
    else
        idx, content  = split_task(task)
        idx = idx - 1
        if idx >= 0
            $entries.delete_at(idx)
            $entries.insert(idx, content)
        end
        true
    end
end

def add_or_delete_commandDM(command)
    command = command[($COMMAND_SIG.length)..-1]
    case command
    when "move"
        while move_entryDM
        end
        true
    when "edit"
        while editDM
        end
        true
    when "group-view"
        while group_viewDM
        end
        true
    when "vim"
        $at_end.push (lambda { spawn("gvim #{$FILE}", :out => "/dev/null", :err => "/dev/null" ) })
        false
    when *($ADD_OR_DELETE_COMMANDS)
        puts "Sorry, #{command} has not been implemented yet!"
        false
    else
        true
    end
end

def group_viewDM
    prompt="Add/delete a task or group of tasks"
    task = groupDM(prompt)

    if task.empty?
        false
    elsif task.start_with?($UNSORTED_NAME)
        delete_ungroupedDM
    elsif task.match($GROUP_REGEX).end(0) == task.length
        delete_groupDM(task)
    elsif task.start_with?($COMMAND_SIG)
        group_view_commandDM(task)
    else
        idx = extract_index_from_task_text(task)
        if idx >= 0
            $entries.delete_at(idx)
        else
            $entries.push(task)
        end
        true
    end
end

def groupDM(prompt)
    ents = groups_list(grouped_entries) +
                      $GROUP_VIEW_COMMANDS.map{|x|$COMMAND_SIG+x}
    my_dmenu(ents, prompt)
end

def grouped_entries
    groups = Hash.new
    numbered_entries($entries).each do |task|
        task_groups = task.to_s.scan($GROUP_REGEX)
        if task_groups.empty?
            task_groups = [$UNSORTED_NAME]
        end
        task_groups.each do |x|
            if groups[x].nil?
                groups[x] = Array.new
            end
            groups[x].push(task)
        end
    end
    groups
end

def groups_list(groups)
    grouped_entries_presentation = Array.new
    sorted_groups = groups.keys.sort_by{|x| x.downcase }
    sorted_groups.each do |k|
        grouped_entries_presentation.push(k)
        groups[k].each do |task|
            grouped_entries_presentation.push("    "+task)
        end
    end
    grouped_entries_presentation
end

def delete_ungroupedDM
    response = my_dmenu(%w(no yes), "Delete every ungrouped task?")
    if response == 'yes'
        $entries.delete_if {|x| ! x.match($GROUP_REGEX)}
    end
    true
end

def delete_groupDM(group)
    response = my_dmenu(%w(no yes), "Delete all in #{group}?")
    if response == 'yes'
        $entries.delete_if {|x| x.match(Regexp.escape(group))}
    end
    true
end

def group_view_commandDM(command)
    command = command[($COMMAND_SIG.length)..-1]
    case command
    when "edit"
        while group_view_editDM
        end
        true
    when *($GROUP_VIEW_COMMANDS)
        puts "Sorry, #{command} has not been implemented yet!"
        false
    else
        true
    end
end

def group_view_editDM
    groups = grouped_entries
    task = my_dmenu(groups_list(groups), "Editing...")
    if task.empty?
        false
    elsif task == $UNSORTED_NAME
        edit_groupDM(task)
    elsif groups.include?(task)
        edit_groupDM(task)
    else
        idx, content = split_task(task)
        idx = idx - 1
        if idx >= 0
            $entries.delete_at(idx)
            $entries.insert(idx, content)
            true
        else
            false
        end
    end
end

def edit_groupDM(group)
    groups = grouped_entries
    groups = groups.keys.delete_if{|x| x == $UNSORTED_NAME}
    new_name = my_dmenu(groups, "Replace #{group} with")
    $entries = $entries.map {|x| x.gsub(/#{Regexp.escape(group)}/, new_name)}
    $entries.each do |x|
        puts(x)
        puts(/#{Regexp.escape(group)}/)
        puts(new_name)
    end
    true
end

def mainDM
    add_or_deleteDM
end

i = 0
while mainDM
end

File.open($FILE, "w") do |f|
    f.write($entries.join("\n"))
end

$at_end.each do |p|
    p.call
end
# md = "do the laundary @ tomorrow $ 3.00".match(%r{([#{delimeters}][^#{delimeters}]*)+})
